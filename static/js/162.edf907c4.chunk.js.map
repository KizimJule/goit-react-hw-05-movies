{"version":3,"file":"static/js/162.edf907c4.chunk.js","mappings":"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","sources":["components/Fetch/FetchFilms.jsx","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","styled/Movies.styled.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const KEY = 'f3ea910b205c898fa80453aad139450a';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function getPopFilms(page = 1) {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${KEY}&page=${page}`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\ngetPopFilms();\n\nexport async function getAllFilmsInfo(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function getCast(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function getReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\n\nexport async function getSearchFilm(query) {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${query}`;\n  const response = await axios.get(url);\n  return response.data.results;\n}\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\nexport const Form = styled.form`\n  display: inline-flex;\n  align-items: center;\n  gap: 12px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 6px 6px 6px 10px;\n  border-radius: 8px;\n  font-size: 22px;\n  width: 360px;\n`;\n\nexport const Button = styled.button`\n  font-size: 18px;\n  padding: 10px 16px;\n  border-radius: 8px;\n  border: 1px solid #000;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  text-transform: uppercase;\n  color: #000;\n  font-weight: 500;\n  background: #cfe0e8;\n\n  :hover,\n  :focus {\n    background-color: #87bdd8;\n    color: #fff;\n    transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as SC from './SearchBox.styled';\nimport { getSearchFilm } from '../Fetch/FetchFilms';\nimport { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const SearchBox = ({ setSearchMovies }) => {\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const filmQuery = searchQuery.get('query') ?? '';\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n    const query = form.elements.search.value;\n    if (query.trim() === '') {\n      // toast.error('Please, enter the word');\n      alert('Oops!!! Enter the film name');\n      return;\n    }\n    setSearchQuery({ query });\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (!filmQuery) return;\n\n    async function fetchFilms() {\n      const dataFilms = await getSearchFilm(filmQuery);\n\n      const requiredDataFilms = dataFilms.map(\n        ({ id, title, poster_path: poster, vote_average }) => ({\n          id,\n          title,\n          poster: 'https://image.tmdb.org/t/p/w500' + poster,\n          vote_average,\n        })\n      );\n      setSearchMovies(requiredDataFilms);\n    }\n    fetchFilms();\n  }, [filmQuery, setSearchMovies]);\n\n  return (\n    <SC.Div>\n      <SC.Form onSubmit={handleSubmit}>\n        <SC.Input\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <SC.Button type=\"submit\">Search</SC.Button>\n      </SC.Form>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </SC.Div>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Section = styled.section`\n  padding: 120px 20px;\n  margin: 0 auto;\n  max-width: 1280px;\n`;\nexport const UlSearchFilms = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  /* flex-direction: column; */\n  justify-content: center;\n  gap: 20px;\n  list-style: none;\n  padding: 0px;\n  margin: 0px;\n  margin: 0 auto;\n`;\nexport const Li = styled.li`\n  width: 200px;\n\n  :hover,\n  :focus {\n    scale: 1.1;\n    transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\nexport const DivDescr = styled.div`\n  padding-top: 8px;\n  width: 200px;\n`;\nexport const PAboutFilm = styled.p`\n  margin: 0 0 10px 0;\n  font-size: 18px;\n`;\nexport const LinkList = styled(Link)`\n  font-size: 24px;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  color: #000;\n\n  :hover,\n  :focus {\n    color: #fff;\n    transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\nexport const P = styled.p`\n  font-size: 40px;\n  text-align: center;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: 300px;\n  display: block;\n  border-radius: 5px;\n`;\n","import { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SearchBox } from '../components/SearchBox/SearchBox';\nimport * as SC from '../styled/Movies.styled';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [searchMovies, setSearchMovies] = useState('');\n  // console.log('searchMovies', searchMovies);\n\n  return (\n    <main>\n      <SC.Section>\n        <SearchBox setSearchMovies={setSearchMovies} />\n        {searchMovies !== '' ? (\n          <div>\n            <SC.UlSearchFilms>\n              {searchMovies.map(({ id, poster, title, vote_average }) => (\n                <SC.Li key={id}>\n                  <SC.LinkList to={`/movies/${id}`} state={{ from: location }}>\n                    <SC.Img\n                      src={\n                        poster &&\n                        poster !== 'https://image.tmdb.org/t/p/w500null'\n                          ? poster\n                          : 'https://dummyimage.com/200x300/858585/fff.jpg&text=No+photo'\n                      }\n                      alt={title}\n                      width=\"200\"\n                      height=\"240\"\n                    />\n                    <SC.DivDescr>\n                      <SC.PAboutFilm>{title} </SC.PAboutFilm>\n                      {vote_average !== 0 && (\n                        <SC.PAboutFilm>\n                          Rating: {vote_average.toFixed(1)}\n                        </SC.PAboutFilm>\n                      )}\n                    </SC.DivDescr>\n                  </SC.LinkList>\n                </SC.Li>\n              ))}\n            </SC.UlSearchFilms>\n          </div>\n        ) : (\n          <SC.P>No movies... Try to find something</SC.P>\n        )}\n\n        {searchMovies.length === 0 && searchMovies !== '' && (\n          <SC.P>There is no movies with that name</SC.P>\n        )}\n      </SC.Section>\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY","BASE_URL","getPopFilms","page","url","axios","data","results","getAllFilmsInfo","movieId","getCast","getReviews","getSearchFilm","query","response","Div","styled","Form","Input","Button","SearchBox","setSearchMovies","useSearchParams","searchQuery","setSearchQuery","filmQuery","get","useEffect","dataFilms","requiredDataFilms","map","id","title","poster","poster_path","vote_average","fetchFilms","onSubmit","evt","preventDefault","form","currentTarget","elements","search","value","trim","reset","alert","type","name","autoComplete","autoFocus","placeholder","Suspense","fallback","Loader","Section","UlSearchFilms","Li","DivDescr","PAboutFilm","LinkList","Link","P","Img","location","useLocation","useState","searchMovies","to","state","from","src","alt","width","height","toFixed","length"],"sourceRoot":""}