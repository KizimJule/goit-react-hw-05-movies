{"version":3,"file":"static/js/307.d015c206.chunk.js","mappings":"2PAKO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAuBC,GAAvB,kFACCC,EADD,UACUC,EAAAA,EADV,kBAC4BF,EAD5B,4BACuDG,EAAAA,GADvD,SAEkBC,EAAAA,GAAAA,IAAUH,GAF5B,uBAEGI,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAMPN,EAAQO,UAAY,CAClBN,QAASO,IAAAA,Q,sDCVEC,EAAaC,EAAAA,GAAAA,IAAH,2LAUVC,EAASD,EAAAA,GAAAA,GAAH,4LAUNE,EAAKF,EAAAA,GAAAA,GAAH,yCAGFG,EAAMH,EAAAA,GAAAA,IAAH,uKASHI,EAAWJ,EAAAA,GAAAA,IAAH,8DAKRK,EAAIL,EAAAA,GAAAA,EAAH,mEAIDM,EAAaN,EAAAA,GAAAA,EAAH,0D,SCIvB,EA1Ca,WACX,IAAQT,GAAYgB,EAAAA,EAAAA,MAAZhB,QACR,GAAwBiB,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRrB,EAAQC,GAASqB,KAAKF,EACvB,GAAE,CAACnB,IAECkB,GAKH,SAAC,EAAD,UACGA,EAAKA,KAAKI,OAAS,GAClB,SAAC,EAAD,UACGJ,EAAKA,KAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACb,UAAC,EAAD,YACE,SAAC,EAAD,CACEC,IACEH,EACI,kCAAoCA,EACpC,8DAENI,IAAKH,EACLI,MAAM,MACNC,OAAO,SAET,UAAC,EAAD,YACE,SAAC,EAAD,UAAOL,KACP,UAAC,EAAD,yBAA2BC,UAbnBH,EADC,OAoBjB,qCA3BG,IA+BV,C,4EC7CM,IAAMrB,EAAM,mCAEND,EAAW,8B","sources":["components/Fetch/FetchCast.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Fetch/Key-url.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport { KEY, BASE_URL } from './Key-url';\n\nexport async function getCast(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\ngetCast.propTypes = {\n  movieId: PropTypes.number,\n};\n","import styled from 'styled-components';\n\nexport const SectionDiv = styled.div`\n  padding: 20px;\n  margin: 0 auto;\n  max-width: 1280px;\n  border-bottom: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const UlCast = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  /* align-items: center; */\n  justify-content: center;\n  gap: 20px;\n  list-style: none;\n  padding: 0px;\n  margin: 0px;\n`;\nexport const Li = styled.li`\n  width: 200px;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 5px;\n  /* object-fit: cover; */\n  /* width: 200x;\n  height: 320px; */\n`;\nexport const DivDescr = styled.div`\n  padding-top: 8px;\n  width: 200px;\n`;\n\nexport const P = styled.p`\n  margin: 0 0 10px 0;\n  font-size: 18px;\n`;\nexport const PCharacter = styled.p`\n  margin: 0;\n  font-size: 18px;\n`;\n","import { getCast } from '../Fetch/FetchCast';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as SC from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    getCast(movieId).then(setCast);\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n  // console.log(cast.cast);\n  return (\n    <SC.SectionDiv>\n      {cast.cast.length > 0 ? (\n        <SC.UlCast>\n          {cast.cast.map(({ id, profile_path, name, character }) => (\n            <SC.Li key={id}>\n              <SC.Img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : 'https://dummyimage.com/200x300/858585/fff.jpg&text=No+photo'\n                }\n                alt={name}\n                width=\"200\"\n                height=\"240\"\n              />\n              <SC.DivDescr>\n                <SC.P>{name}</SC.P>\n                <SC.PCharacter>Character: {character}</SC.PCharacter>\n              </SC.DivDescr>\n            </SC.Li>\n          ))}\n        </SC.UlCast>\n      ) : (\n        <p>No cast</p>\n      )}\n    </SC.SectionDiv>\n  );\n};\n\nexport default Cast;\n","export const KEY = 'f3ea910b205c898fa80453aad139450a';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n"],"names":["getCast","movieId","url","BASE_URL","KEY","axios","data","propTypes","PropTypes","SectionDiv","styled","UlCast","Li","Img","DivDescr","P","PCharacter","useParams","useState","cast","setCast","useEffect","then","length","map","id","profile_path","name","character","src","alt","width","height"],"sourceRoot":""}